name: Deploy AWS Lab Playground

on:
  push:
    branches: [ main, clean-main ]
  workflow_dispatch:
    inputs:
      action:
        description: "AcciÃ³n a ejecutar"
        required: true
        default: "deploy"
        type: choice
        options: [deploy, destroy]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # ej: overflow-app
  TF_IN_AUTOMATION: "1"
  TF_INPUT: "0"

concurrency:
  group: umma-oaxaca-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  deploy:
    if: ${{ github.event_name == 'push' || inputs.action == 'deploy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" --region "${AWS_REGION}" >/dev/null 2>&1 \
          || aws ecr create-repository --repository-name "${ECR_REPOSITORY}" --region "${AWS_REGION}" >/dev/null
          echo "âœ… ECR listo: ${ECR_REPOSITORY}"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build & push image (latest + sha)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Export image URIs
        run: |
          echo "IMAGE_URI_LATEST=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_ENV
          echo "IMAGE_URI_SHA=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init (development)
        run: terraform -chdir=environments/development init -backend-config="backend.hcl"

      - name: Terraform Plan (pin to sha)
        run: |
          terraform -chdir=environments/development plan \
            -input=false \
            -var-file="terraform.tfvars" \
            -var "docker_image=${IMAGE_URI_SHA}" \
            -out=tfplan-dev
      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-dev
          path: environments/development/tfplan-dev

      - name: Terraform Apply
        run: terraform -chdir=environments/development apply -input=false -auto-approve tfplan-dev

      - name: Outputs & Summary
        run: |
          IP=$(terraform -chdir=environments/development output -raw ec2_public_ip || echo "N/A")
          RDS=$(terraform -chdir=environments/development output -raw rds_endpoint || echo "N/A")
          {
            echo "## âœ… Deployment completado"
            echo ""
            echo "- Imagen (inmutable): \`${IMAGE_URI_SHA}\`"
            echo "- Imagen (latest): \`${IMAGE_URI_LATEST}\`"
            echo "- Web: http://${IP}"
            echo "- Code Server: http://${IP}:8080"
            echo "- RDS: \`${RDS}\`"
            echo ""
            echo "> Credenciales por defecto (ajÃºstalas con secrets en el runtime):"
            echo "- Code Server Password: \`(usar secret CODE_SERVER_PASSWORD)\`"
            echo "- RDS Username: \`postgres\`"
            echo "- RDS Password: \`(usar secret)\`"
          } >> "$GITHUB_STEP_SUMMARY"

  destroy:
    if: ${{ inputs.action == 'destroy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init (development)
        run: terraform -chdir=environments/development init -backend-config="backend.hcl"

      - name: Terraform Destroy
        run: |
          terraform -chdir=environments/development destroy \
            -auto-approve \
            -input=false \
            -var-file="terraform.tfvars"

      - name: Cleanup Summary
        run: |
          {
            echo "## ðŸ§¹ Cleanup completado"
            echo ""
            echo "- Infraestructura Terraform: **DESTRUIDA**"
            echo "- ImÃ¡genes ECR: **CONSERVADAS** (reutilizables)"
            echo "- Costos ahorrados estimados: ~\$53.40/mes"
          } >> "$GITHUB_STEP_SUMMARY"
